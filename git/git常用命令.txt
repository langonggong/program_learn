分支
从远程拉取分支
git checkout -b <branch> origin/<branch>
推送commit到远程分支
git push origin <branch>:<branch>

日志
git log 查看提交历史,git log --graph --pretty=oneline --abbrev-commit和git log --graph可以看到分之合并图
git reflog 查看命令历史
git diff HEAD -- fileName 查看工作区文件与版本库的差异
git log origin/远程分支名 -n 5 查看远程分支最近五次提交的日志

撤销修改

git checkout -- file可以丢弃工作区的修改,让工作区和版本库一致
1.文件未add
2.文件add后再次修改，checkout后回到刚刚add的状态

git reset HEAD file  撤销暂存区的修改，文件回到工作区，即add后未提交；让暂存区和版本库一致

撤销删除
git chcekout file  rm误删除。该命令使用版本库里的文件版本替换工作区的版本

1.git log
2.git reset --hard "commit id"
如果使用git rm 误删除，找到未删除之前的commit_id

删除暂存区&分支&本地的文件
git rm  file
git commit 
git push
删除暂存区&分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制
git rm --cached file_path
git commit 
git push


版本回退
git reset --hard commit_id
分支管理
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
从远程获取+切换分支:：git checkout -b <name> origin/<name>
合并分支到当前分支（默认Fast forward方式，删除分支后，会丢掉分支信息）：git merge dev
合并分支到当前分支（--no-ff参数，表示禁用Fast forward）：git merge --no-ff -m "merge with no-ff" dev
指定本地dev分支与远程origin/dev分支的链接：git branch --set-upstream dev origin/dev

commit管理
修改最后一次commit的说明信息 git commit --amend
修改某一次历史提交的commit信息：
1.修改当前版本倒数第n次的状态 git rebase -i HEAD~3
2.将需要修改的那个的pick改为edit
3.对commit进行修改 git commit --amend
4.改回来 git rebase --continue
